---
import { Sun, Moon } from "@lucide/astro";
---

<div class="hidden lg:block">
	<label class="mt-1 flex cursor-pointer gap-2">
		<svg
			xmlns="http://www.w3.org/2000/svg"
			width="18"
			height="18"
			viewBox="0 0 24 24"
			fill="none"
			stroke="currentColor"
			stroke-width="2"
			stroke-linecap="round"
			stroke-linejoin="round"
		>
			<circle cx="12" cy="12" r="5"></circle>
			<path
				d="M12 1v2M12 21v2M4.2 4.2l1.4 1.4M18.4 18.4l1.4 1.4M1 12h2M21 12h2M4.2 19.8l1.4-1.4M18.4 5.6l1.4-1.4"
			></path>
		</svg>
		<input type="checkbox" class="toggle theme-controller" />
		<svg
			xmlns="http://www.w3.org/2000/svg"
			width="18"
			height="18"
			viewBox="0 0 24 24"
			fill="none"
			stroke="currentColor"
			stroke-width="2"
			stroke-linecap="round"
			stroke-linejoin="round"
		>
			<path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"></path>
		</svg>
	</label>
</div>

<div class="lg:hidden">
	<label class="swap swap-rotate">
		<!-- this hidden checkbox controls the state -->
		<input type="checkbox" class="theme-controller" />

		<!-- sun icon for light mode -->
		<Sun class="swap-on" />

		<!-- moon icon for dark mode -->
		<Moon class="swap-off" />
	</label>
</div>
<script>
	// Función para establecer el tema
	function setTheme(theme) {
		document.documentElement.setAttribute("data-theme", theme);
		localStorage.setItem("theme", theme);
	}

	// Función para alternar entre temas
	function toggleTheme() {
		const currentTheme = localStorage.getItem("theme") || "nord";
		const newTheme = currentTheme === "nord" ? "sunset" : "nord";
		setTheme(newTheme);
	}

	// Cargar el tema al inicio
	document.addEventListener("DOMContentLoaded", () => {
		// Obtener el tema guardado o usar 'nord' como predeterminado
		const savedTheme = localStorage.getItem("theme") || "nord";
		setTheme(savedTheme);

		// Actualizar el estado de los checkboxes según el tema actual
		const themeToggles = document.querySelectorAll<HTMLInputElement>(".theme-controller");
		themeToggles.forEach((toggle) => {
			toggle.checked = savedTheme === "sunset";
		});

		// Agregar event listeners a todos los controles de tema
		themeToggles.forEach((toggle) => {
			toggle.addEventListener("change", () => {
				toggleTheme();
				// Sincronizar todos los controles
				themeToggles.forEach((t) => {
					t.checked = toggle.checked;
				});
			});
		});
	});
</script>
